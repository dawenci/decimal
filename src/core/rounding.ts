/**
 * 0 - 6 与 Java 中的 BigDecimal 的 RoundingMode 一致。
 */
 export enum RoundingMode {
  /**
   * 负 <- - - 0 - - -> 正
   * ---------------------
   * 朝远离 0 的方向进位，即整数往 Infinity 方向，负数往 -Infinity 方向进位。
   * 注意：只要舍弃部分不全为零，就需要进位，而非只看舍弃部分的最高位。
   * 例如：
   * 0.11，precision = 2，结果：0.11
   * 0.111，precision = 2，结果：0.12
   * 0.11001，precision = 2，结果：0.12
   * -0.11，precision = 2，结果：-0.11
   * -0.111，precision = 2，结果：-0.12
   * -0.11001，precision = 2，结果：-0.12
   */
  Up = 0,

  /**
   * 负 -> - - 0 - - <- 正
   * ---------------------
   * 直接截断无需进位。
   * 例如：
   * 0.119，precision = 2，结果：0.11
   * -0.119，precision = 2，结果：-0.11
   */
  Down = 1,

  /**
   * 负 -> - - 0 - - -> 正
   * ---------------------
   * 不论正负数，均朝 Infinity 方向进位。即正数远离 0 方向进位，负数直接截断。
   * 注意：对于正数，只要舍弃部分不全为零，就需要进位，而非只看舍弃部分的最高位。
   * 例如：
   * 0.11，precision = 2，结果：0.11
   * 0.11001，precision = 2，结果：0.12
   * -0.119，precision = 2，结果：-0.11
   */
  Ceiling = 2,

  /**
   * 负 <- - - 0 - - <- 正
   * ---------------------
   * 不论正负数，均朝 -Infinity 方向进位。即负数远离 0 方向进位，正数直接截断。
   * 注意：对于负数，只要舍弃部分不全为零，就需要进位，而非只看舍弃部分的最高位。
   * 例如：
   * 0.119，precision = 2，结果 0.11
   * -0.11，precision = 2，结果：-0.11
   * -0.11001，precision = 2，结果：-0.12
   */
  Floor = 3,

  /**
   *
   * 正数     ->
   * <- - - half - - ->
   * ------------------
   *
   * 负数     <-
   * <- - - half - - ->
   * ------------------
   *
   * 远离 0 的方向四舍五入。
   * 例如：
   * 0.114，precision = 2，结果：0.11
   * 0.115，precision = 2，结果：0.12
   * -0.114，precision = 2，结果：-0.11
   * -0.115，precision = 2，结果：-0.12
   */
  HalfUp = 4,

  /**
   * 正数     <-
   * <- - - half - - ->
   * ------------------
   *
   * 负数     ->
   * <- - - half - - ->
   * ------------------
   *
   * 远离 0 的方向五舍六入。
   * 注意：舍去部分的最高位等于 5 的时候，如果舍去部分还有不为零的数，也仍然需要进位。
   * 例如：
   * 0.556，precision = 2，结果：0.56
   * -0.556，precision = 2，结果：-0.56
   * 0.555，precision = 2，结果：0.55
   * -0.555，precision = 2，结果：-0.55
   * 0.5551，precision = 2，结果：0.56
   * -0.5551，precision = 2，结果：-0.56
   * 0.554，precision = 2，结果：0.55
   * -0.554，precision = 2，结果：-0.55
   */
  HalfDown = 5,

  /**
   * 银行家舍入，舍入位非 5，则四舍六入，如果为 5，5 后面还有数字，则进位，否则，根据 5 前面一位是奇数还是偶数，奇进偶舍。
   * 注意：舍去部分的最高位等于 5 的时候，如果舍去部分还有不为零的数，也仍然需要进位。
   */
  HalfEven = 6,

  /**
   * 朝 Infinity 方向四舍五入。
   */
  HalfCeiling = 7,

  /**
   * 朝 Infinity 方向五舍六入。
   */
  HalfFloor = 8,
}

export const isRoundingMode = (test: unknown): test is RoundingMode => {
  return !!RoundingMode[test as any]
}
